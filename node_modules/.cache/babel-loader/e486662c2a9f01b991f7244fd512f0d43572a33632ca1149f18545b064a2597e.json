{"ast":null,"code":"// Browser notification utilities\nexport function requestNotificationPermission() {\n  return new Promise(resolve => {\n    if ('Notification' in window) {\n      if (Notification.permission === 'granted') {\n        resolve(true);\n      } else if (Notification.permission !== 'denied') {\n        Notification.requestPermission().then(permission => {\n          resolve(permission === 'granted');\n        });\n      } else {\n        resolve(false);\n      }\n    } else {\n      resolve(false);\n    }\n  });\n}\nexport function showNotification(title, options = {}) {\n  if ('Notification' in window && Notification.permission === 'granted') {\n    const notification = new Notification(title, {\n      icon: '/favicon.ico',\n      badge: '/favicon.ico',\n      ...options\n    });\n\n    // Auto close after 5 seconds\n    setTimeout(() => {\n      notification.close();\n    }, 5000);\n    return notification;\n  }\n  return null;\n}\nexport function scheduleMedicationReminder(medication, time) {\n  const [hours, minutes] = time.split(':');\n  const now = new Date();\n  const reminderTime = new Date();\n  reminderTime.setHours(parseInt(hours), parseInt(minutes), 0, 0);\n\n  // If the time has passed today, schedule for tomorrow\n  if (reminderTime <= now) {\n    reminderTime.setDate(reminderTime.getDate() + 1);\n  }\n  const timeUntilReminder = reminderTime.getTime() - now.getTime();\n  return setTimeout(() => {\n    showNotification(`Time for ${medication.name}`, {\n      body: `Take ${medication.dosage} as prescribed`,\n      tag: `medication-${medication.id}-${time}`,\n      requireInteraction: true\n    });\n  }, timeUntilReminder);\n}\nexport function generateFamilyNotification(patientName, medicationName, status) {\n  const messages = {\n    taken: `${patientName} has taken their ${medicationName} medication.`,\n    missed: `${patientName} missed their scheduled ${medicationName} dose.`,\n    overdue: `${patientName}'s ${medicationName} dose is overdue.`\n  };\n  return {\n    id: Date.now(),\n    type: status,\n    message: messages[status] || `Update about ${patientName}'s medication.`,\n    timestamp: new Date(),\n    medication: medicationName,\n    patient: patientName\n  };\n}\nexport function formatTimeUntilNext(nextReminderTime) {\n  const now = new Date();\n  const diff = nextReminderTime.getTime() - now.getTime();\n  if (diff <= 0) {\n    return 'Now';\n  }\n  const hours = Math.floor(diff / (1000 * 60 * 60));\n  const minutes = Math.floor(diff % (1000 * 60 * 60) / (1000 * 60));\n  if (hours > 0) {\n    return `${hours}h ${minutes}m`;\n  } else {\n    return `${minutes}m`;\n  }\n}\nexport function getNextReminder(medications) {\n  const now = new Date();\n  let nextReminder = null;\n  let nextTime = null;\n  medications.forEach(medication => {\n    medication.times.forEach(time => {\n      const [hours, minutes] = time.split(':');\n      const reminderTime = new Date();\n      reminderTime.setHours(parseInt(hours), parseInt(minutes), 0, 0);\n\n      // If time has passed today, check tomorrow\n      if (reminderTime <= now) {\n        reminderTime.setDate(reminderTime.getDate() + 1);\n      }\n      if (!nextTime || reminderTime < nextTime) {\n        nextTime = reminderTime;\n        nextReminder = {\n          medication: medication.name,\n          time: time,\n          timestamp: reminderTime\n        };\n      }\n    });\n  });\n  return nextReminder;\n}","map":{"version":3,"names":["requestNotificationPermission","Promise","resolve","window","Notification","permission","requestPermission","then","showNotification","title","options","notification","icon","badge","setTimeout","close","scheduleMedicationReminder","medication","time","hours","minutes","split","now","Date","reminderTime","setHours","parseInt","setDate","getDate","timeUntilReminder","getTime","name","body","dosage","tag","id","requireInteraction","generateFamilyNotification","patientName","medicationName","status","messages","taken","missed","overdue","type","message","timestamp","patient","formatTimeUntilNext","nextReminderTime","diff","Math","floor","getNextReminder","medications","nextReminder","nextTime","forEach","times"],"sources":["C:/Users/tamanna/OneDrive/Desktop/MediTrack/src/utils/notifications.js"],"sourcesContent":["// Browser notification utilities\r\nexport function requestNotificationPermission() {\r\n  return new Promise((resolve) => {\r\n    if ('Notification' in window) {\r\n      if (Notification.permission === 'granted') {\r\n        resolve(true);\r\n      } else if (Notification.permission !== 'denied') {\r\n        Notification.requestPermission().then(permission => {\r\n          resolve(permission === 'granted');\r\n        });\r\n      } else {\r\n        resolve(false);\r\n      }\r\n    } else {\r\n      resolve(false);\r\n    }\r\n  });\r\n}\r\n\r\nexport function showNotification(title, options = {}) {\r\n  if ('Notification' in window && Notification.permission === 'granted') {\r\n    const notification = new Notification(title, {\r\n      icon: '/favicon.ico',\r\n      badge: '/favicon.ico',\r\n      ...options\r\n    });\r\n    \r\n    // Auto close after 5 seconds\r\n    setTimeout(() => {\r\n      notification.close();\r\n    }, 5000);\r\n    \r\n    return notification;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function scheduleMedicationReminder(medication, time) {\r\n  const [hours, minutes] = time.split(':');\r\n  const now = new Date();\r\n  const reminderTime = new Date();\r\n  reminderTime.setHours(parseInt(hours), parseInt(minutes), 0, 0);\r\n  \r\n  // If the time has passed today, schedule for tomorrow\r\n  if (reminderTime <= now) {\r\n    reminderTime.setDate(reminderTime.getDate() + 1);\r\n  }\r\n  \r\n  const timeUntilReminder = reminderTime.getTime() - now.getTime();\r\n  \r\n  return setTimeout(() => {\r\n    showNotification(`Time for ${medication.name}`, {\r\n      body: `Take ${medication.dosage} as prescribed`,\r\n      tag: `medication-${medication.id}-${time}`,\r\n      requireInteraction: true\r\n    });\r\n  }, timeUntilReminder);\r\n}\r\n\r\nexport function generateFamilyNotification(patientName, medicationName, status) {\r\n  const messages = {\r\n    taken: `${patientName} has taken their ${medicationName} medication.`,\r\n    missed: `${patientName} missed their scheduled ${medicationName} dose.`,\r\n    overdue: `${patientName}'s ${medicationName} dose is overdue.`\r\n  };\r\n  \r\n  return {\r\n    id: Date.now(),\r\n    type: status,\r\n    message: messages[status] || `Update about ${patientName}'s medication.`,\r\n    timestamp: new Date(),\r\n    medication: medicationName,\r\n    patient: patientName\r\n  };\r\n}\r\n\r\nexport function formatTimeUntilNext(nextReminderTime) {\r\n  const now = new Date();\r\n  const diff = nextReminderTime.getTime() - now.getTime();\r\n  \r\n  if (diff <= 0) {\r\n    return 'Now';\r\n  }\r\n  \r\n  const hours = Math.floor(diff / (1000 * 60 * 60));\r\n  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\r\n  \r\n  if (hours > 0) {\r\n    return `${hours}h ${minutes}m`;\r\n  } else {\r\n    return `${minutes}m`;\r\n  }\r\n}\r\n\r\nexport function getNextReminder(medications) {\r\n  const now = new Date();\r\n  let nextReminder = null;\r\n  let nextTime = null;\r\n  \r\n  medications.forEach(medication => {\r\n    medication.times.forEach(time => {\r\n      const [hours, minutes] = time.split(':');\r\n      const reminderTime = new Date();\r\n      reminderTime.setHours(parseInt(hours), parseInt(minutes), 0, 0);\r\n      \r\n      // If time has passed today, check tomorrow\r\n      if (reminderTime <= now) {\r\n        reminderTime.setDate(reminderTime.getDate() + 1);\r\n      }\r\n      \r\n      if (!nextTime || reminderTime < nextTime) {\r\n        nextTime = reminderTime;\r\n        nextReminder = {\r\n          medication: medication.name,\r\n          time: time,\r\n          timestamp: reminderTime\r\n        };\r\n      }\r\n    });\r\n  });\r\n  \r\n  return nextReminder;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}