{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tamanna\\\\OneDrive\\\\Desktop\\\\MediTrack\\\\src\\\\context\\\\MedicationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MedicationContext = /*#__PURE__*/createContext();\nconst initialState = {\n  medications: [],\n  takenHistory: [],\n  streak: 0,\n  notifications: []\n};\nfunction medicationReducer(state, action) {\n  switch (action.type) {\n    case 'ADD_MEDICATION':\n      return {\n        ...state,\n        medications: [...state.medications, {\n          ...action.payload,\n          id: Date.now()\n        }]\n      };\n    case 'DELETE_MEDICATION':\n      return {\n        ...state,\n        medications: state.medications.filter(med => med.id !== action.payload)\n      };\n    case 'MARK_TAKEN':\n      const newTaken = {\n        medicationId: action.payload.medicationId,\n        timestamp: new Date(),\n        scheduledTime: action.payload.scheduledTime\n      };\n      return {\n        ...state,\n        takenHistory: [...state.takenHistory, newTaken]\n      };\n    case 'UPDATE_STREAK':\n      return {\n        ...state,\n        streak: action.payload\n      };\n    case 'ADD_NOTIFICATION':\n      return {\n        ...state,\n        notifications: [...state.notifications, action.payload]\n      };\n    case 'CLEAR_NOTIFICATION':\n      return {\n        ...state,\n        notifications: state.notifications.filter(notif => notif.id !== action.payload)\n      };\n    case 'LOAD_DATA':\n      return action.payload;\n    default:\n      return state;\n  }\n}\nexport function MedicationProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(medicationReducer, initialState);\n\n  // Load data from localStorage on mount\n  useEffect(() => {\n    const savedData = localStorage.getItem('meditrack-data');\n    if (savedData) {\n      try {\n        const parsedData = JSON.parse(savedData);\n        dispatch({\n          type: 'LOAD_DATA',\n          payload: parsedData\n        });\n      } catch (error) {\n        console.error('Error loading saved data:', error);\n      }\n    }\n  }, []);\n\n  // Save data to localStorage whenever state changes\n  useEffect(() => {\n    localStorage.setItem('meditrack-data', JSON.stringify(state));\n  }, [state]);\n\n  // Calculate streak\n  useEffect(() => {\n    const calculateStreak = () => {\n      const today = new Date();\n      const todayStr = today.toDateString();\n\n      // Get all medications that should have been taken today\n      const todaysMedications = state.medications.filter(med => {\n        return med.times.some(time => {\n          const [hours, minutes] = time.split(':');\n          const scheduledTime = new Date();\n          scheduledTime.setHours(parseInt(hours), parseInt(minutes), 0, 0);\n          return scheduledTime <= today;\n        });\n      });\n\n      // Check if all today's medications were taken\n      const todaysTaken = state.takenHistory.filter(taken => new Date(taken.timestamp).toDateString() === todayStr);\n      const allTakenToday = todaysMedications.every(med => todaysTaken.some(taken => taken.medicationId === med.id));\n      if (allTakenToday && todaysMedications.length > 0) {\n        dispatch({\n          type: 'UPDATE_STREAK',\n          payload: state.streak + 1\n        });\n      }\n    };\n    if (state.medications.length > 0) {\n      calculateStreak();\n    }\n  }, [state.takenHistory, state.medications]);\n  const addMedication = medication => {\n    dispatch({\n      type: 'ADD_MEDICATION',\n      payload: medication\n    });\n  };\n  const deleteMedication = id => {\n    dispatch({\n      type: 'DELETE_MEDICATION',\n      payload: id\n    });\n  };\n  const markAsTaken = (medicationId, scheduledTime) => {\n    dispatch({\n      type: 'MARK_TAKEN',\n      payload: {\n        medicationId,\n        scheduledTime\n      }\n    });\n\n    // Add success notification\n    dispatch({\n      type: 'ADD_NOTIFICATION',\n      payload: {\n        id: Date.now(),\n        type: 'success',\n        message: 'Medication marked as taken!',\n        timestamp: new Date()\n      }\n    });\n  };\n  const addNotification = notification => {\n    dispatch({\n      type: 'ADD_NOTIFICATION',\n      payload: {\n        ...notification,\n        id: Date.now()\n      }\n    });\n  };\n  const clearNotification = id => {\n    dispatch({\n      type: 'CLEAR_NOTIFICATION',\n      payload: id\n    });\n  };\n  const getTodaysReminders = () => {\n    const now = new Date();\n    const today = now.toDateString();\n    const reminders = [];\n    state.medications.forEach(medication => {\n      medication.times.forEach(time => {\n        const [hours, minutes] = time.split(':');\n        const scheduledTime = new Date();\n        scheduledTime.setHours(parseInt(hours), parseInt(minutes), 0, 0);\n        const isToday = scheduledTime.toDateString() === today;\n        const wasTaken = state.takenHistory.some(taken => taken.medicationId === medication.id && taken.scheduledTime === time && new Date(taken.timestamp).toDateString() === today);\n        if (isToday && !wasTaken) {\n          reminders.push({\n            medication,\n            scheduledTime: time,\n            timestamp: scheduledTime,\n            isOverdue: scheduledTime < now\n          });\n        }\n      });\n    });\n    return reminders.sort((a, b) => a.timestamp - b.timestamp);\n  };\n  const getAdherenceRate = () => {\n    const last7Days = Array.from({\n      length: 7\n    }, (_, i) => {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      return date.toDateString();\n    });\n    let totalScheduled = 0;\n    let totalTaken = 0;\n    last7Days.forEach(dateStr => {\n      state.medications.forEach(medication => {\n        medication.times.forEach(time => {\n          totalScheduled++;\n          const wasTaken = state.takenHistory.some(taken => taken.medicationId === medication.id && taken.scheduledTime === time && new Date(taken.timestamp).toDateString() === dateStr);\n          if (wasTaken) totalTaken++;\n        });\n      });\n    });\n    return totalScheduled > 0 ? Math.round(totalTaken / totalScheduled * 100) : 0;\n  };\n  const value = {\n    ...state,\n    addMedication,\n    deleteMedication,\n    markAsTaken,\n    addNotification,\n    clearNotification,\n    getTodaysReminders,\n    getAdherenceRate\n  };\n  return /*#__PURE__*/_jsxDEV(MedicationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n}\n_s(MedicationProvider, \"s3jE+e7wLGXN/2uWqdAG2uRSMfA=\");\n_c = MedicationProvider;\nexport function useMedication() {\n  _s2();\n  const context = useContext(MedicationContext);\n  if (!context) {\n    throw new Error('useMedication must be used within a MedicationProvider');\n  }\n  return context;\n}\n_s2(useMedication, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"MedicationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","MedicationContext","initialState","medications","takenHistory","streak","notifications","medicationReducer","state","action","type","payload","id","Date","now","filter","med","newTaken","medicationId","timestamp","scheduledTime","notif","MedicationProvider","children","_s","dispatch","savedData","localStorage","getItem","parsedData","JSON","parse","error","console","setItem","stringify","calculateStreak","today","todayStr","toDateString","todaysMedications","times","some","time","hours","minutes","split","setHours","parseInt","todaysTaken","taken","allTakenToday","every","length","addMedication","medication","deleteMedication","markAsTaken","message","addNotification","notification","clearNotification","getTodaysReminders","reminders","forEach","isToday","wasTaken","push","isOverdue","sort","a","b","getAdherenceRate","last7Days","Array","from","_","i","date","setDate","getDate","totalScheduled","totalTaken","dateStr","Math","round","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useMedication","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/tamanna/OneDrive/Desktop/MediTrack/src/context/MedicationContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\n\r\nconst MedicationContext = createContext();\r\n\r\nconst initialState = {\r\n  medications: [],\r\n  takenHistory: [],\r\n  streak: 0,\r\n  notifications: []\r\n};\r\n\r\nfunction medicationReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'ADD_MEDICATION':\r\n      return {\r\n        ...state,\r\n        medications: [...state.medications, { ...action.payload, id: Date.now() }]\r\n      };\r\n    \r\n    case 'DELETE_MEDICATION':\r\n      return {\r\n        ...state,\r\n        medications: state.medications.filter(med => med.id !== action.payload)\r\n      };\r\n    \r\n    case 'MARK_TAKEN':\r\n      const newTaken = {\r\n        medicationId: action.payload.medicationId,\r\n        timestamp: new Date(),\r\n        scheduledTime: action.payload.scheduledTime\r\n      };\r\n      return {\r\n        ...state,\r\n        takenHistory: [...state.takenHistory, newTaken]\r\n      };\r\n    \r\n    case 'UPDATE_STREAK':\r\n      return {\r\n        ...state,\r\n        streak: action.payload\r\n      };\r\n    \r\n    case 'ADD_NOTIFICATION':\r\n      return {\r\n        ...state,\r\n        notifications: [...state.notifications, action.payload]\r\n      };\r\n    \r\n    case 'CLEAR_NOTIFICATION':\r\n      return {\r\n        ...state,\r\n        notifications: state.notifications.filter(notif => notif.id !== action.payload)\r\n      };\r\n    \r\n    case 'LOAD_DATA':\r\n      return action.payload;\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function MedicationProvider({ children }) {\r\n  const [state, dispatch] = useReducer(medicationReducer, initialState);\r\n\r\n  // Load data from localStorage on mount\r\n  useEffect(() => {\r\n    const savedData = localStorage.getItem('meditrack-data');\r\n    if (savedData) {\r\n      try {\r\n        const parsedData = JSON.parse(savedData);\r\n        dispatch({ type: 'LOAD_DATA', payload: parsedData });\r\n      } catch (error) {\r\n        console.error('Error loading saved data:', error);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Save data to localStorage whenever state changes\r\n  useEffect(() => {\r\n    localStorage.setItem('meditrack-data', JSON.stringify(state));\r\n  }, [state]);\r\n\r\n  // Calculate streak\r\n  useEffect(() => {\r\n    const calculateStreak = () => {\r\n      const today = new Date();\r\n      const todayStr = today.toDateString();\r\n      \r\n      // Get all medications that should have been taken today\r\n      const todaysMedications = state.medications.filter(med => {\r\n        return med.times.some(time => {\r\n          const [hours, minutes] = time.split(':');\r\n          const scheduledTime = new Date();\r\n          scheduledTime.setHours(parseInt(hours), parseInt(minutes), 0, 0);\r\n          return scheduledTime <= today;\r\n        });\r\n      });\r\n\r\n      // Check if all today's medications were taken\r\n      const todaysTaken = state.takenHistory.filter(taken => \r\n        new Date(taken.timestamp).toDateString() === todayStr\r\n      );\r\n\r\n      const allTakenToday = todaysMedications.every(med =>\r\n        todaysTaken.some(taken => taken.medicationId === med.id)\r\n      );\r\n\r\n      if (allTakenToday && todaysMedications.length > 0) {\r\n        dispatch({ type: 'UPDATE_STREAK', payload: state.streak + 1 });\r\n      }\r\n    };\r\n\r\n    if (state.medications.length > 0) {\r\n      calculateStreak();\r\n    }\r\n  }, [state.takenHistory, state.medications]);\r\n\r\n  const addMedication = (medication) => {\r\n    dispatch({ type: 'ADD_MEDICATION', payload: medication });\r\n  };\r\n\r\n  const deleteMedication = (id) => {\r\n    dispatch({ type: 'DELETE_MEDICATION', payload: id });\r\n  };\r\n\r\n  const markAsTaken = (medicationId, scheduledTime) => {\r\n    dispatch({ \r\n      type: 'MARK_TAKEN', \r\n      payload: { medicationId, scheduledTime }\r\n    });\r\n    \r\n    // Add success notification\r\n    dispatch({\r\n      type: 'ADD_NOTIFICATION',\r\n      payload: {\r\n        id: Date.now(),\r\n        type: 'success',\r\n        message: 'Medication marked as taken!',\r\n        timestamp: new Date()\r\n      }\r\n    });\r\n  };\r\n\r\n  const addNotification = (notification) => {\r\n    dispatch({ \r\n      type: 'ADD_NOTIFICATION', \r\n      payload: { ...notification, id: Date.now() }\r\n    });\r\n  };\r\n\r\n  const clearNotification = (id) => {\r\n    dispatch({ type: 'CLEAR_NOTIFICATION', payload: id });\r\n  };\r\n\r\n  const getTodaysReminders = () => {\r\n    const now = new Date();\r\n    const today = now.toDateString();\r\n    \r\n    const reminders = [];\r\n    \r\n    state.medications.forEach(medication => {\r\n      medication.times.forEach(time => {\r\n        const [hours, minutes] = time.split(':');\r\n        const scheduledTime = new Date();\r\n        scheduledTime.setHours(parseInt(hours), parseInt(minutes), 0, 0);\r\n        \r\n        const isToday = scheduledTime.toDateString() === today;\r\n        const wasTaken = state.takenHistory.some(taken => \r\n          taken.medicationId === medication.id &&\r\n          taken.scheduledTime === time &&\r\n          new Date(taken.timestamp).toDateString() === today\r\n        );\r\n        \r\n        if (isToday && !wasTaken) {\r\n          reminders.push({\r\n            medication,\r\n            scheduledTime: time,\r\n            timestamp: scheduledTime,\r\n            isOverdue: scheduledTime < now\r\n          });\r\n        }\r\n      });\r\n    });\r\n    \r\n    return reminders.sort((a, b) => a.timestamp - b.timestamp);\r\n  };\r\n\r\n  const getAdherenceRate = () => {\r\n    const last7Days = Array.from({ length: 7 }, (_, i) => {\r\n      const date = new Date();\r\n      date.setDate(date.getDate() - i);\r\n      return date.toDateString();\r\n    });\r\n\r\n    let totalScheduled = 0;\r\n    let totalTaken = 0;\r\n\r\n    last7Days.forEach(dateStr => {\r\n      state.medications.forEach(medication => {\r\n        medication.times.forEach(time => {\r\n          totalScheduled++;\r\n          \r\n          const wasTaken = state.takenHistory.some(taken =>\r\n            taken.medicationId === medication.id &&\r\n            taken.scheduledTime === time &&\r\n            new Date(taken.timestamp).toDateString() === dateStr\r\n          );\r\n          \r\n          if (wasTaken) totalTaken++;\r\n        });\r\n      });\r\n    });\r\n\r\n    return totalScheduled > 0 ? Math.round((totalTaken / totalScheduled) * 100) : 0;\r\n  };\r\n\r\n  const value = {\r\n    ...state,\r\n    addMedication,\r\n    deleteMedication,\r\n    markAsTaken,\r\n    addNotification,\r\n    clearNotification,\r\n    getTodaysReminders,\r\n    getAdherenceRate\r\n  };\r\n\r\n  return (\r\n    <MedicationContext.Provider value={value}>\r\n      {children}\r\n    </MedicationContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useMedication() {\r\n  const context = useContext(MedicationContext);\r\n  if (!context) {\r\n    throw new Error('useMedication must be used within a MedicationProvider');\r\n  }\r\n  return context;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}